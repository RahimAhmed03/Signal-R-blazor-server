@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorServerSignalRApp.Data
@inject NavigationManager Navigation
@inject TranslationService TranslationService
@inject StickerService StickerService
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Translate:
        <select @bind="translationTargetLanguageInput">
            <option value="">Do not translate</option>
            @foreach (var language in TranslationService.AvailableLanguages)
            {
                <option value="@language.Code">@language.Name</option>
            }
        </select>
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<div class="form-group">
    <label>
        Search:
        <input @bind="stickerSearch" size="50" />
    </label>
</div>
<button @onclick="Search" >Search</button>
@foreach (var item in sticker) {
    <img src= "@item.stickerImg" style="height: 50px"/>
}

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>
            <p>@message.Username: @message.Content</p>
            <p>Translated: @message.TranslatedContent</p>
        </li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<MessageListContent> messages = new List<MessageListContent>();
    private string? stickerSearch;
    private List<Sticker.StickerContent> sticker = new();
    private string? userInput;
    private string? messageInput;
    private string? translationTargetLanguageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            var messageListContent = new MessageListContent()
            {
                Username = message.Username,
                Content = message.Content,
            };

            if (!String.IsNullOrEmpty(translationTargetLanguageInput))
            {
                var translation = TranslationService.TranslateText(translationTargetLanguageInput, messageListContent.Content);
                messageListContent.TranslatedContent = translation.TranslatedText;
            }

            messages.Add(messageListContent);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            if (userInput == null || messageInput == null)
            {
                throw new InvalidDataException("userInput or messageInput cannot be null");
            }
            var message = new Message()
            {
                Username = userInput,
                Content = messageInput
            };
            await hubConnection.SendAsync("SendMessage", message);
        }
    }

    private async Task Search()
    {
        var response = await StickerService.Search("1", stickerSearch);
        sticker = response.body.stickerList;
        InvokeAsync(StateHasChanged);
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    internal class MessageListContent
    {
        public string Username { get; set; }
        public string Content { get; set; }
        public string? TranslatedContent { get; set; }
    }
}