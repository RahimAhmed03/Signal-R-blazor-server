@page "/channel/{ChannelName}"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorServerSignalRApp.Data
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Translate:
        <select @bind="translationTargetLanguageInput">
            <option value="">Do not translate</option>
            @foreach (var language in TranslationService.AvailableLanguages)
            {
                <option value="@language.Code">@language.Name</option>
            }
        </select>
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<div class="form-group">
    <label>
        Search:
        <input @bind="stickerSearch" size="50" />
    </label>
</div>
<button @onclick="Search">Search</button>
@foreach (var item in sticker)
{
    <button @onclick="(()=> SendImage(item.stickerImg))">
        <img src="@item.stickerImg" style="height: 50px" />
    </button>

}

<hr>

<ul id="messagesList">
    @if (messages.ContainsKey(ChannelName))
        @foreach (var message in messages[ChannelName])
        {
            <li>
                <p>@message.Username: @message.Content</p>
                <img src="@message.Image" style="height: 100px" />
                <p>Translated: @message.TranslatedContent</p>
            </li>
        }
</ul>

@code {
    [Parameter] public string ChannelName { get; set; }
    [Inject] private HubConnection hubConnection { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private TranslationService TranslationService { get; set; } = default!;
    [Inject] private StickerService StickerService { get; set; } = default!;
    private Dictionary<string, List<MessageListContent>> messages = new Dictionary<string, List<MessageListContent>>();
    private string? stickerSearch;
    private List<Sticker.StickerContent> sticker = new();
    private string? userInput;
    private string? messageInput;
    private string? translationTargetLanguageInput;
    private List<IDisposable> _disposables = new();
    private bool IsDisposed = false;

    protected override async Task OnInitializedAsync()
    {
        await hubConnection.SendAsync("JoinChannel", ChannelName);
        if (!messages.ContainsKey(ChannelName)) messages[ChannelName] = new List<MessageListContent>();

        _disposables.Add(hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            var messageListContent = new MessageListContent()
                {
                    Username = message.Username,
                    Content = message.Content,
                    Image = message.Image,
                };

            if (!String.IsNullOrEmpty(translationTargetLanguageInput) && !String.IsNullOrWhiteSpace(messageListContent.Content))
            {
                var translation = TranslationService.TranslateText(translationTargetLanguageInput, messageListContent.Content);
                messageListContent.TranslatedContent = translation.TranslatedText;
            }

            messages[ChannelName].Add(messageListContent);
            InvokeAsync(StateHasChanged);
        }));

        Navigation.LocationChanged += HandleLocationChanged;
        _disposables.Add(Navigation.RegisterLocationChangingHandler(HandleLocationChanging));
    }

    private async ValueTask HandleLocationChanging(LocationChangingContext context)
    {
        await hubConnection.SendAsync("LeaveChannel", ChannelName);
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (IsDisposed)
        {
            Navigation.LocationChanged -= HandleLocationChanged;
            return;
        }

        hubConnection.SendAsync("JoinChannel", ChannelName);
    }

    private async Task Send()
    {
        if (userInput == null || messageInput == null)
        {
            throw new InvalidDataException("userInput or messageInput cannot be null");
        }

        var message = new Message()
            {
                Username = userInput,
                Content = messageInput
            };
        await hubConnection.SendAsync("SendMessage", message);
    }

    private async Task SendImage(string image)
    {
        if (userInput == null || String.IsNullOrEmpty(image))
        {
            throw new InvalidDataException();
        }

        var message = new Message()
            {
                Username = userInput,
                Content = "",
                Image = image
            };
        await hubConnection.SendAsync("SendMessage", message);
    }

    private async Task Search()
    {
        var response = await StickerService.Search("1", stickerSearch);
        sticker = response.body.stickerList;
        await InvokeAsync(StateHasChanged);
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.SendAsync("LeaveChannel", ChannelName);

        _disposables.ForEach(d => d.Dispose());
        _disposables.Clear();
        IsDisposed = true;
    }

    internal class MessageListContent
    {
        public string Username { get; set; }
        public string Content { get; set; }
        public string? TranslatedContent { get; set; }
        public string Image { get; set; }
    }
}